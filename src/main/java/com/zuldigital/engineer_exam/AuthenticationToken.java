package com.zuldigital.engineer_exam;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import org.apache.http.HttpHeaders;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class AuthenticationToken {

	private static final boolean DEBUG = true;

	public static final String BASE_URL = "https://n8e480hh63o547stou3ycz5lwz0958.herokuapp.com/1.1/";

	public static final String TOKEN_URL = BASE_URL + "auth";
	public static final String DATA_URL = BASE_URL + "statuses/home_timeline.json";

	static final String TOKEN_REQUEST_JSON = "{ \"id\": 1, \"name\": \"Zul Digtal\" }";

	static final String APPLICATION_JSON = "application/json";

	private static final String HTTP_RESPONSE_LOG = "HTTP Status: {0} for [{1}]";

	private static final String RECORDS_LOG = "{0} records retrieved for [{1}]";
	private static final String NO_RECORDS_LOG = "No records retrieved for [{0}]";

	private static final String EMPTY = "";

	/**
	 * This App performs REST requests to fetch
	 * authorization token of a protected JWT Rest service and extracts JSON data
	 * using Authorization header
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		
		SpringApplication.run(AuthenticationToken.class, args);

		HttpClient client = null;
		HttpPost post = null;
		HttpGet get = null;
		HttpResponse response = null;

		try {
			client = HttpClientBuilder.create().build();

			post = new HttpPost(TOKEN_URL);

			post.setEntity(new StringEntity(TOKEN_REQUEST_JSON));
			post.setHeader(HttpHeaders.CONTENT_TYPE, APPLICATION_JSON);
			post.setHeader(HttpHeaders.ACCEPT, APPLICATION_JSON);

			response = client.execute(post);

			if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK)
				getAuthorization(client, post, response);
			else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {
				System.out.println(MessageFormat.format(HTTP_RESPONSE_LOG, HttpStatus.SC_UNAUTHORIZED, TOKEN_URL));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * This method uses the authentication URL and request parameters to get the token
	 * @param client
	 * @param post
	 * @param response
	 * @return
	 * @throws ParseException
	 * @throws IOException
	 * @throws ClientProtocolException
	 */
	static boolean getAuthorization(HttpClient client, HttpPost post,
			HttpResponse response) throws ParseException, IOException,
			ClientProtocolException {
		boolean status = false;
		HttpGet get;
		{			
			System.out.println(MessageFormat.format(HTTP_RESPONSE_LOG, HttpStatus.SC_OK, TOKEN_URL));

			JSONObject tokenResponseJson = (JSONObject) new JSONParser().parse(EntityUtils.toString(response.getEntity()));

			String token = String.valueOf(tokenResponseJson.get("token"));

			System.out.println(token);
			System.out.println(EMPTY);

			get = new HttpGet(DATA_URL);

			get.setHeader(HttpHeaders.AUTHORIZATION, token);
			post.setHeader(HttpHeaders.CONTENT_TYPE, APPLICATION_JSON);
			get.setHeader(HttpHeaders.ACCEPT, APPLICATION_JSON);

			response = client.execute(get);

			if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK)
			{
				status = true;
				getJSONData(response);
			}
			else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {
				System.out.println(MessageFormat.format(HTTP_RESPONSE_LOG, HttpStatus.SC_UNAUTHORIZED, DATA_URL));
			}
		}
		return status;
	}

	/**
	 * This method gets the JSON data from URL, using the token generated by the method getAuthorization
	 * @param response
	 * @throws IOException
	 * @throws ParseException
	 */
	private static void getJSONData(HttpResponse response) throws IOException,
	ParseException {
		{
			System.out.println(MessageFormat.format(HTTP_RESPONSE_LOG, HttpStatus.SC_OK, DATA_URL));

			String originalJson = EntityUtils.toString(response.getEntity());

			if (DEBUG) {
				System.out.println(EMPTY);
				System.out.println("JSON response data");
				System.out.println(originalJson);
				System.out.println(EMPTY);
			}

			JSONArray dataResponseJson = (JSONArray) new JSONParser().parse(originalJson);

			if (dataResponseJson != null)
				printTweetfromJSON(dataResponseJson);
			else {
				System.out.println(MessageFormat.format(NO_RECORDS_LOG, DATA_URL));
			}
		}
	}

	/**
	 * This method manipulates the JSON to get the attribute "text"
	 * and then prints the random tweet, according to the business rules
	 * @param dataResponseJson
	 */
	private static void printTweetfromJSON(JSONArray dataResponseJson) {
		{
			System.out.println(MessageFormat.format(RECORDS_LOG, dataResponseJson.size(), DATA_URL));
			System.out.println(EMPTY);

			Iterator<?> iDataResponseJson = dataResponseJson.iterator();
			JSONObject itemResponseJson = null;
			List<String> ramdomTexts = new ArrayList<String	>();

			while (iDataResponseJson.hasNext()) {
				itemResponseJson = (JSONObject) iDataResponseJson.next();	
				ramdomTexts.add((String) itemResponseJson.get("text"));
			}
			
			Collections.shuffle(ramdomTexts);					

			String[] texts = ramdomTexts.get(0).split(" ");  
			String finalTweetText = "";
			List<String> tweetList = new ArrayList<String	>();

			for (int i = 0; i < texts.length; i++)	
			{
				String text = texts[i];
				if(finalTweetText.length() + text.length() <=45)
				{
					finalTweetText += " " + text;				
				}
				else{
					tweetList.add(finalTweetText);
					finalTweetText = "";
					i = i -1;
				}	
				if(texts.length == i + 1)
				{
					tweetList.add(finalTweetText);
				}								
			}

			for (int j = 0; j < tweetList.size(); j++)				
			{
				System.out.println("Tweet #" + (j+1) + ": " + tweetList.get(j));
			}
		}
	}
}
